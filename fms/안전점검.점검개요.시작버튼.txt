# 점검개요 - 점검시작 버튼 클릭 이벤트
1. safeChkData.sendYn 값에 따른 분기 메세지 (Y:이미 송신 완료한 대상입니다, S:이미 작업한 대상입니다)
2. safeChkData.chkReslt 값에 따른 분기 메세지 (40: 이미 점검 제외한 대상입니다)
3. 1,2항목 pass한 경우 입상관 및 조정기 점검대상인지 체크
4. safeChkStanPipeChkInfo.bldNum(입상관점검결과정보의 건물번호) - safeChkData.bldNum (점검대상의 건물번호)
 - 건물번호(bldNum)을 key로 대상 존재유무 판단
 1) 대상이 없고 safeChkData.pipeNum이 존재하면 "입상관점검이 존재합니다.\n입상관점검을 진행해주세요." 안내메세지 출력(확인) 후 입상관점검 화면 팝업
   - 입상관 점검 화면 ( 가스누출 화면코드 : SAFECHK_GASCHK, 입상관보호대 화면코드 : TIMER_COCK / 버튼명과 코드값 셋팅)
   - 주소부분은 safeChkData객체의 주소정보 항목으로 조합
	 -> safeChkData.newRoadNm || (null이면 ''처리)
	 -> safeChkData.newAddrS 값이 null이 아니면 ' ' || safeChkData.newAddrM || '-' || newAddrS ||
	 -> safeChkData.newAddrS 값이 null이면 newAddrM ||
     -> safeChkData.houseCnt 값이 null이 아니면 ', '||safeChkData.houseCnt|| '호' ||' '||
     -> safeChkData.houseCnt 값이 null이면 ''
	 -> ' ' || safeChkData.lotNumSecondAddr (null이면 ''처리)
	 -> 최종조합 : safeChkData.newRoadNm || ' ' || safeChkData.newAddrM || '-' || newAddrS || ' ' || safeChkData.lotNumSecondAddr
   - safeChkStanPipeChkInfo객체 추가생성
   - safeChkStanPipeChkInfo.chkEmpId			-> init-data.employeeData.employeeId
   - safeChkStanPipeChkInfo.chkerNm				-> init-data.employeeData.nmKor
   - safeChkStanPipeChkInfo.chkYmd				-> 오늘날짜
   - safeChkStanPipeChkInfo.chkTime				-> 현재시간
   - safeChkStanPipeChkInfo.gasLk				-> 가스누출 SAFECHK_GASCHK code값
   - safeChkStanPipeChkInfo.pipeRust			-> null
   - safeChkStanPipeChkInfo.standPipeReoteInst	-> 입상관보호대 TIMER_COCK code값
   - safeChkStanPipeChkInfo.pipeCnt				-> 입상관 개수
   - safeChkStanPipeChkInfo.sendYn				-> 'S'
   - safeChkStanPipeChkInfo.chkYear				-> safeChkData.chkYear
   - safeChkStanPipeChkInfo.chkOrder			-> safeChkData.chkOrder
   - safeChkStanPipeChkInfo.chkType				-> safeChkData.chkType
   - safeChkStanPipeChkInfo.bldNum				-> safeChkData.bldNum
   - /api/safeChk/safeChkStanPipeChkRsltReg 입상관점검결과 등록 api 호출


 2) 위 조건과 다를 시 조정기점검 대상 체크
  - safeChkRegtrInfo.bldNum(조정기대상정보의 건물번호) - safeChkData.bldNum (점검대상의 건물번호)
  - 건물번호(bldNum)을 key로 대상 존재유무 판단
  - 대상이 존재하면 "조정기가 존재합니다.\n조정기점검을 진행해주세요" 알림메세지 노출 (확인) 후 "조정기 점검" 화면 이동 - 해당 화면은 조정기점검 단일업무와 동일한 화면

  #조정기점검#	
  - 조정기점검 화면(객체명 safeChkRegtrInfo)
  - 주소
	 -> safeChkRegtrInfo.newRoadNm || (null이면 ''처리)
	 -> safeChkRegtrInfo.newAddrS 값이 null이 아니면 ' ' || safeChkRegtrInfo.newAddrM || '-' || safeChkRegtrInfo.newAddrS ||
	 -> safeChkRegtrInfo.newAddrS 값이 null이면 safeChkRegtrInfo.newAddrM	 
	 -> 최종조합 : safeChkData.newRoadNm || ' ' || safeChkData.newAddrM || '-' || safeChkRegtrInfo.newAddrS
  - 조정기번호 -> regtrNum
  - S/N		-> regtrIdNum
  - 작업구분	-> 화면코드 SAFECHK_REGTR_WORK : generRegtrChkFlag값에 따른 name표기
  - 형태		-> 화면코드 SINGLE_COLIVE_CD : singleColiveFlag값에 따른 name표기
  - 전수		-> safeChkRegtrMtrInfo객체 내 count값
  - 위치		-> regtrLocFlag
  - 제작사	-> makerNm
  - 모델명	-> regtrModelNm
  - 1차압력	-> firstPress
  - 타입		-> regtrLrTypeNm
  - 설치일	-> regtrInstYmd
  - 필터교체일 -> filterReplYmd
  - 점검이력 : 이전점검 fhalfChkRslt(화면코드:SAFECHK_RSLT - code값에 따른 name표기) / fhalfChkYmd / fhalfChkerNm
  A. 점검불가 - 화면코드 : CHK_EXCEP_WHY
   -> safeChkRegtrInfo 객체 업데이트
   -> safeChkRegtrInfo.chkExcepWhy	->	사유 입력값
   -> safeChkRegtrInfo.chkEndYn		->	'S'
   -> safeChkRegtrInfo.chkYmd		->	오늘일자
   -> safeChkRegtrInfo.chkStrDtm	->	yyyymmddhh24miss
   -> safeChkRegtrInfo.chkEndDtm	->	yyyymmddhh24miss
   -> safeChkRegtrInfo.updEmpNm		->	init-data.employeeData.nmKor
   -> safeChkRegtrInfo.chkRslt		->	'40'
   -> safeChkRegtrInfo.chkEmpId		->	init-data.employeeData.employeeId
   -> safeChkRegtrInfo.updEmpId		->	init-data.employeeData.employeeId

  - safeChkRegtrInfo 객체를 request로 셋팅
  - /api/safeChk/safeChkRegtrChkRsltReg 조정기점검 결과 등록(제외) api호출
  - 정상등록 처리가 되면 safeChkRegtrInfo.chkEndYn = 'Y' 업데이트


  B. 화면 우측상단 "더보기(상세정보)" 클릭 시 상세정보 화면으로 이동
	a) 조정기 정보 (safeChkRegtrInfo객체 항목 바인딩)
	 -> 제작사  : init-data -> useMaker -> makerFlag값이 30인 대상을 콤보박스로 표기 (makerNum[code], makerNm[name])
	 -> 모델	  : init-data -> regtrModel -> makerNum = safeChkRegtrInfo.makerNum과 일차하는 대상을 콤보박스 표기 (regtrModelCd[code], regtrModelNm[name])
	 -> 타입	  : regtrType (화면코드 SAFECHK_REGTR_TYPE)
     -> S/N	  : regtrIdNum
	 -> 구분	  : singleColiveFlag
		-> 수정사항이 있는 경우 객체 업데이트 (safeChkRegtrInfo.infoFlag = 'S' 셋팅)
		-> 저장 시 수정사항이 있는 경우 조정기정보변경등록 api 호출 (/api/safeChk/regtrInfoChgReg)
		-> 정상 등록 완료되었으면 safeChkRegtrInfo.infoFlag = 'Y' 셋팅
		

	b) 계량기 목록 (safeChkRegtrMtrInfo객체)
	 - 기물번호 : mtrIdNum / 위치 : mtrLocFlag / 구분 : defalut값은 "-" (기존 계량기대상), 신규 또는 삭제건은 regtrResouChgSts값으로 표기 (30:신규, 20:삭제)

	 - 삭제버튼 클릭
	  -> 현장에서 신규추가한 대상이면 대상 delete
	  -> 기존 수신받은 대상이면 정보 업데이트
		- safeChkRegtrMtrInfo.regtrResouChgSts = '20'
		- safeChkRegtrMtrInfo.sendYn = 'S'
		- safeChkRegtrMtrInfo.empId = init-data.employeeData.employeeId
		- safeChkRegtrMtrInfo.updEmpId = init-data.employeeData.employeeId

	 - 신규버튼 클릭
	  -> 수기입력된 mtrIdNum값 검증 -> safeChkRegtrMtrInfo객체내 일치하는 대상 확인 -> 있으면 "중복된 기물번호입니다." 알림 메세지 노출
	  -> 신규추가할땐 기물번호만 저장, 위치 입력x
	  -> safeChkRegtrMtrInfo객체 항목 추가
		- safeChkRegtrMtrInfo.regtrNum			-> safeChkRegtrInfo.regtrNum
		- safeChkRegtrMtrInfo.chkPlanYm			-> safeChkRegtrInfo.chkPlanYm
		- safeChkRegtrMtrInfo.safeChkType		-> safeChkRegtrInfo.safeChkType
		- safeChkRegtrMtrInfo.mtrIdNum			-> 입력값
		- safeChkRegtrMtrInfo.regtrResouChgSts	-> '30'
		- safeChkRegtrMtrInfo.empId				-> init-data.employeeData.employeeId
		- safeChkRegtrMtrInfo.updEmpid			-> init-data.employeeData.employeeId
		- safeChkRegtrMtrInfo.sendYn			-> 'S'

	 - 저장버튼 클릭
		-> 수정 또는 추가된 safeChkRegtrMtrInfo객체 request항목
		-> 조정기계량기정보등록 api 호출 (/api/safeChk/regtrMtrInfoReg)
		-> 등록 후 safeChkRegtrMtrInfo.sendYn = 'Y' 업데이트
		

	c) 조정기정보 변경사항이있는지여부와 계량기정보 추가 또는 삭제 이력이 있는지 여부를 판단하여 각기 api호출 처리하면됨
	 - 순서는 조정기정보부터 검증 후 그 다음 계량기정보 검증

  C. 점검시작 버튼
	- 조정기점검(단독) 점검진행 화면으로 이동 (safeChkRegtrInfo.chkStrDtm 현재시간 셋팅 [yyyymmddhh24miss])
	- 조정기 안전점검(단독) -  화면코드 : SAFECHK_REGTR_CHKSL
	- 기타 
	 -> 필터교체(filterReplFlag) - 화면코드 : FILTER_CHG (버튼)
	 -> 특이사항(specialEtc) - 화면코드 : RMK (콤보박스)

	- 부적합 항목이 선택된 경우 사진촬영
	- 사진촬영 후 해당 사진파일명 셋팅 (safeChkRegtrInfo객체)
	 -> regtrNum_chkPlanYm_safeChkType_regtrNotPassFlag('10')_notPassItem(부적합항목코드)
	- 폴더명 : PHOTO_REGTR 저장
	- 부적합 항목(safeChkRegtrNoGoodInfo)객체에 항목 추가
	 -> safeChkRegtrNoGoodInfo.regtrNum			-> safeChkRegtrInfo.regtrNum
	 -> safeChkRegtrNoGoodInfo.chkPlanYm		-> safeChkRegtrInfo.chkPlanYm
	 -> safeChkRegtrNoGoodInfo.safeChkType		-> safeChkRegtrInfo.safeChkType
	 -> safeChkRegtrNoGoodInfo.regtrNotPassFlag	-> '10'
	 -> safeChkRegtrNoGoodInfo.regtrNotPassItem	-> 부적합항목코드
	 -> safeChkRegtrNoGoodInfo.notPassBetterYmd	-> 오늘일자
	 -> safeChkRegtrNoGoodInfo.correctionFlag	-> 'Y'
	 -> safeChkRegtrNoGoodInfo.sendYn			-> 'S'
	 -> safeChkRegtrNoGoodInfo.empId			-> init-data.employeeData.employeeId
	 -> safeChkRegtrNoGoodInfo.updEmpId			-> init-data.employeeData.employeeId
	- 위 처리된 부적합을 다시 적합으로 돌릴 시 해당 항목 delete

	- 저장 버튼 클릭 (safeChkRegtrInfo.chkEndDtm 현재시간 셋팅 [yyyymmddhh24miss])
	 -> safeChkRegtrInfo객체 항목 업데이트 후 request OR 부적합이 있는 경우 safeChkNoGoodInfo객체 request
	 -> safeChkRegtrInfo객체 항목 업데이트
	 -> safeChkRegtrInfo.chkStrDtm
	 -> safeChkRegtrInfo.chkEndDtm
	 -> safeChkRegtrInfo.chkYmd		-> 오늘일자
	 -> safeChkRegtrInfo.filterReplFlag	-> 입력값 (교체:30 인 경우 safeChkRegtrInfo.newFilterReplYmd -> 오늘일자 셋팅)
	 -> safeChkRegtrInfo.specialEtc	-> 입력값
	 -> safeChkRegtrInfo.chkEndYn	-> 'S'
	 -> safeChkRegtrInfo.chkRslt	-> safeChkNoGoodInfo객체에 regtrNum,chkPlanYm,safeChkType에 해당하는 항목이 있는 경우 '21' 없으면 '20'
	 -> safeChkRegtrInfo.chkEmpId	-> init-data.employeeData.employeeId
	 -> safeChkRegtrInfo.updEmpId	-> init-data.employeeData.employeeId
	 -> safeChkRegtrInfo.updEmpNm	-> init-data.employeeData.nmKor
	 
	 -> /api/safeChk/safeChkRegtrChkRsltReg 조정기점검 결과 등록(제외) api호출
	 -> 정상 등록 완료 후 safeChkRegtrInfo.chkEndYn = 'Y' 업데이트
	 

	 -> 부적합이 발생한 경우 /api/safeChk/safeChkRegtrNoGoodReg 조정기점검 부적합 등록 api호출
	 -> 정상등록 완료 후 safeChkRegtrNoGoodInfo.sendYn = 'Y'
	 

	 -> 부적합 사진 전송 관련 항목 셋팅
		- safeChkRegtrNoGoodPhoto 객체 생성 후 항목 셋팅
		- safeChkRegtrNoGoodPhoto.regtrNum			-> safeChkRegtrInfo.regtrNum
		- safeChkRegtrNoGoodPhoto.chkPlanYm			-> safeChkRegtrInfo.chkPlanYm
		- safeChkRegtrNoGoodPhoto.safeChkType		-> safeChkRegtrInfo.safeChkType
		- safeChkRegtrNoGoodPhoto.regtrNotPassFlag	-> safeChkRegtrNoGoodInfo.regtrNotPassFlag
		- safeChkRegtrNoGoodPhoto.regtrNotPassItem	-> safeChkRegtrNoGoodInfo.regtrNotPassItem
		- safeChkRegtrNoGoodPhoto.photo				-> PHOTO_REGTR 사진폴더에서 사진조회 후  base62변환 셋팅
	 -> /api/safeChk/safeChkRegtrNoGoodPhotoReg 호출
	 
	 -> 정상등록 완료되면 "점검이 완료되었습니다." 메세지 노출 후 점검개요 화면으로 이동
	
 3) 1),2) 해당안하면 "점검시작"화면으로 이동 - 입상관점검이 존재하지않고, 조정기점검대상이 없으면 점검진행 (safeChkData.chkTimeFrom 현재시간 셋팅 후 화면이동)
