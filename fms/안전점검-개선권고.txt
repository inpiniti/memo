1.개선권고 목록
 - 상단 필터링 버튼
	-> 전체 : safeChkNoGoodInfo객체 모든 항목
	-> 부적합 : safeChkNoGoodDetalInfo.excepPreuseChk == 'N'인 대상
		- asis : WHERE ( CASE WHEN ('N') IN ( SELECT EXCEP_PREUSE_CHK FROM NORMAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM = NG.CHK_EXEC_NUM ) THEN 'Y' ELSE 'N' END  ) = 'Y'")
	-> 권고 : safeChkNoGoodDetalInfo.excepPreuseChk == 'Y'인 대상
		- asis : WHERE ( CASE WHEN ('Y') IN ( SELECT EXCEP_PREUSE_CHK FROM NORMAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM = NG.CHK_EXEC_NUM ) THEN 'Y' ELSE 'N' END  ) = 'Y'")
 - 목록 항목 표기
 - 주소
	-> 도로명
	 - safeChkNoGoodInfo.town || ' ' || safeChkNoGoodInfo.village || ' ' || safeChkNoGoodInfo.newRoadNm || ' ' || safeChkNoGoodInfo.newAddrM || '-' || safeChkNoGoodInfo.newAddrS || ' ' || safeChkNoGoodInfo.coLiveNm || ' ' || safeChkNoGoodInfo.bldNm || '-' || safeChkNoGoodInfo.houseCnt || ' ' || safeChkNoGoodInfo.lotNumSecondAddr || '/' || safeChkNoGoodInfo.custNm
	 - asis : IFNULL(TOWN,'') ||' '|| IFNULL(VILLAGE,'') ||' '|| IFNULL(NEW_ROAD_NM,'') ||' '|| IFNULL(NEW_ADDR_M,'') ||'-'|| IFNULL(NEW_ADDR_S,'') ||' '|| IFNULL(CO_LIVE_NM, '') ||' '|| IFNULL(BLD_NM, '') ||'-'|| IFNULL(HOUSE_CNT, '') ||' '|| IFNULL(LOT_NUM_SECOND_ADDR,' ')
	-> 지번
	 - safeChkNoGoodInfo.town ||' '|| safeChkNoGoodInfo.village ||' '|| safeChkNoGoodInfo.addr1M ||'-'|| safeChkNoGoodInfo.addr1S ||' '|| safeChkNoGoodInfo.coLiveNm ||' '|| safeChkNoGoodInfo.bldNm ||' '|| safeChkNoGoodInfo.houseCnt ||' '|| safeChkNoGoodInfo.lotNumSecondAddr
	 - asis : IFNULL(TOWN,'') ||' '|| IFNULL(VILLAGE,'') ||' '|| IFNULL(ADDR1_M,'') ||'-'|| IFNULL(ADDR1_S,'') ||' '|| IFNULL(CO_LIVE_NM,'') ||' '|| IFNULL(BLD_NM,'') ||'-'|| IFNULL(HOUSE_CNT,'') ||' '|| IFNULL(LOT_NUM_SECOND_ADDR,'')
 - 고객명 : safeChkNoGoodInfo.custNm
 - 상태 : safeChkNoGoodInfo.endYn (Y:완료, S:진행, else:미검)

2.개선권고 개요
 - 상단 버튼 : 정기점검(safeChkNoGoodInfo.chkExecNum과 일치하는 safeChkData.chkExecNum이 있는 경우 활성화 : 선택화면 점검개요 화면으로 이동)

 - 고객명 : safeChkNoGoodInfo.custNm / 상호명이 있는 경우 (safeChkNoGoodInfo.firmNm)
 - 주소 표기 (기본표기 도로명, 주소 클릭 시 지번으로 변경표기)
	-> addrInfo += addrInfo;
	-> 도로명
		if(length(safeChkNoGoodInfo.county) > 0)		
		{
			addrInfo += safeChkNoGoodInfo.county;
		}
		if(length(safeChkNoGoodInfo.newRoadNm) > 0)
		{
			addrInfo += " ";
			addrInfo +=  safeChkNoGoodInfo.newRoadNm;
		}
		if(length(safeChkNoGoodInfo.newAddrM) > 0)
		{
			addrInfo += " ";
			addrInfo +=  safeChkNoGoodInfo.newAddrM;
		}
		if(length(safeChkNoGoodInfo.newAddrS) > 0)
		{
			addrInfo +=  "-" );
			addrInfo +=  safeChkNoGoodInfo.newAddrS;
			addrInfo +=  "\n" ;
		}
		if( Str_Cmp(safeChkNoGoodInfo.singleColiveFlag, "10") == 0 )
		{
			if(length(safeChkNoGoodInfo.houseCnt) > 0)
			{
				addrInfo +=  safeChkNoGoodInfo.houseCnt;
			}
			if(length(safeChkNoGoodInfo.lotNumSecondAddr) > 0)
			{
				addrInfo += " ";
				addrInfo +=  safeChkNoGoodInfo.lotNumSecondAddr;
			}
		}
		else if( Str_Cmp(safeChkNoGoodInfo.singleColiveFlag, "20") == 0 )
		{
			if(length(safeChkNoGoodInfo.coLiveNm) > 0)
			{
				addrInfo +=  safeChkNoGoodInfo.coLiveNm;
			}
			if(length(safeChkNoGoodInfo.bldNm) > 0)
			{
				addrInfo += " ";
				addrInfo +=  safeChkNoGoodInfo.bldNm;
			}
			if(length(safeChkNoGoodInfo.houseCnt) > 0)
			{
				addrInfo +=  "-" );
				addrInfo +=  safeChkNoGoodInfo.houseCnt;
			}
		}
	-> 지번		
		if(length(safeChkNoGoodInfo.county) > 0)		
		{
			addrInfo += safeChkNoGoodInfo.county;
		}
		if(length(safeChkNoGoodInfo.town) > 0)			
		{
			addrInfo += " ";
			addrInfo += safeChkNoGoodInfo.town;
		}
		if(length(safeChkNoGoodInfo.village) > 0)			
		{
			addrInfo += " ";
			addrInfo +=  safeChkNoGoodInfo.village;
		}
		if(length(safeChkNoGoodInfo.addr1M > 0)		
		{
			addrInfo += " ";
			addrInfo +=  safeChkNoGoodInfo.addr1M);
		}
		if(length(safeChkNoGoodInfo.addr1S) > 0)		
		{
			addrInfo +=  "-" );
			addrInfo +=  safeChkNoGoodInfo.addr1S);
		}		
		addrInfo +=  "\n";		
		if( safeChkNoGoodInfo.singleColiveFlag == "10" )
		{
			if(length(safeChkNoGoodInfo.houseCnt) > 0)
			{
				addrInfo +=  safeChkNoGoodInfo.houseCnt;
			}
			if(length(safeChkNoGoodInfo.bldNm) > 0)
			{
				addrInfo += " ";
				addrInfo +=  safeChkNoGoodInfo.bldNm;
			}
			if(length(safeChkNoGoodInfo.lotNumSecondAddr) > 0)
			{
				addrInfo += " ";
				addrInfo +=  safeChkNoGoodInfo.lotNumSecondAddr);
			}
		}
		else if( safeChkNoGoodInfo.singleColiveFlag == "20")
		{
			if(length(safeChkNoGoodInfo.coLiveNm) > 0)
			{
				addrInfo +=  safeChkNoGoodInfo.coLiveNm );
			}
			if(length(safeChkNoGoodInfo.bldNm) > 0)
			{
				addrInfo += " ";
				addrInfo +=  safeChkNoGoodInfo.bldNm;
			}
			if(length(safeChkNoGoodInfo.houseCnt) > 0)
			{
				addrInfo +=  "-";
				addrInfo +=  safeChkNoGoodInfo.houseCnt;
			}
		}
 - 부적합이력
	-> safeChkNoGoodChaInfo객체 및 safeChkNoGoodDetalInfo객체 항목 조합 표기
	-> safeChkNoGoodChaInfo.betterAdviceDegree | safeChkNoGoodChaInfo.betterYn(Y:개선,N:미개선) | safeChkNoGoodDetalInfo.notPassItemNm
	   safeChkNoGoodChaInfo.betterAdviceYmd | safeChkNoGoodChaInfo.betterAdviceExpire
	-> ▼ 클릭 시
	 - 점검단위 : safeChkNoGoodDetalInfo.chkSecNm
	 - 세부항목 : safeChkNoGoodDetalInfo.notPassItemNm
	 - 연소기번호 : safeChkNoGoodDetalInfo.burnerNum
	 - 부적합사진 : 실시간으로 수신할지 검토중 (부적합대상 수신할때 같이 받을지)
	-> 개선처리 : safeChkNoGoodChaInfo.bettYn = 'Y', safeChkNoGoodChaInfo.betterEndYmd(오늘일자), safeChkNoGoodChaInfo.updEmpid = equipTelNum, safeChkNoGoodChaInfo = employeeId, safeChkNoGoodChaInfo.sendYn = 'S' 셋팅
	 - 사진촬영 폴더 및 파일명 : 2_safeChkNoGoodDetalInfo.chkExecNum_safeChkNoGoodDetalInfo.mtrNum(null=000000000)_safeChkNoGoodDetalInfo.burnerNum(null=000000)_safeChkNoGoodDetalInfo.chkSecCd_safeChkNoGoodDetalInfo.notPassItemCd
	-> 개선처리 완료 시 : 개선일자 및 사진 표기 (safeChkNoGoodChaInfo.betterEndYmd, 사진)
	-> 개선권고발행 : safeChkNoGoodChaInfo.betterAdviceDegree+1, safeChkNoGoodChaInfo.betterAdviceYmd(오늘일자), safeChkNoGoodChaInfo.betterAdviceExpire(오늘일자+30일)
	 - 기존 개선권고발행일이 현재일자기준 +30일이 경과된 경우만 개선권고발행가능
	 - safeChkNoGoodChaInfo.betterAdviceDegree+1이 3차수인 경우 공급중지여부에 따른 공급중지일자(safeChkNoGoodChaInfo.supplyStopYmd), 중지불가사유(safeChkNoGoodChaInfo.notPermitWhy) 입력
	 - 공급중지일자는 오늘일자로 자동 셋팅, 중지불가사유는 화면코드-NOSTOP_WHY 콤보박스 셋팅
 - 방문등록 (safeChkVisitInfo.visitYmd 오늘날짜 등록건이 있는 경우 버튼 비활성화 / safeChkNoGoodChaInfo.betterYn = 'Y'인 경우 "개선 완료된 대상입니다." 알림메세지)
	-> safeChkVisitInfo객체 항목 생성 
	 - safeChkVisitInfo.chkExecNum		-> safeChkNoGoodInfo.chkExecNum
	 - safeChkVisitInfo.visitFlag		-> '30'
	 - safeChkVisitInfo.visitDegree		-> safeChkVisitInfo.visitDegree+1 (신규 등록건이면 '01')
	 - safeChkVisitInfo.visitorId		-> init-data.employeeData.employeeId
	 - safeChkVisitInfo.sendYn			-> 'S'
	 - safeChkVisitInfo.visitYmd		-> 오늘일자
	 - safeChkVisitInfo.visitorNm		-> init-data.employeeData.nmKor
	 - safeChkVisitInfo.bldNum			-> safeChkNoGoodInfo.bldNum
	 - safeChkVisitInfo.instPlaceNum	-> safeChkNoGoodInfo.instPlaceNum
	 - safeChkVisitInfo.chkType			-> safeChkNoGoodInfo.chkType
	 - safeChkVisitInfo.chkYear			-> safeChkNoGoodInfo.chkYear
	 - safeChkVisitInfo.chkOrder		-> safeChkNoGoodInfo.chkOrder
	 - safeChkVisitInfo.objYm			-> safeChkNoGoodInfo.objYm
	 - safeChkVisitInfo.planYm			-> safeChkNoGoodInfo.planYm
	 - safeChkVisitInfo.updEmpid		-> init-data.employeeData.employeeId
	 - safeChkVisitInfo.pdaIp			-> init-data.employeeData.equipTelNum
	 - safeChkVisitInfo.visitTime 		-> 현재시간
	 - safeChkVisitInfo.noChkWhy 		-> ''
	 - safeChkVisitInfo.supplyStopYmd	-> ''
	 - safeChkVisitInfo.notPermitWhy	-> ''
	 - /api/send/safeChk/noChkReg 미점검등록 api 호출 (방문등록 동일 api)
	 /* backend 로직 참고
		rep_item = (List<FR312302_OUT_Item>) adaptor.queryForList("call_FR312302", map);
		/*
			SELECT CHK_EXEC_NUM
			 , VISIT_DEGREE
		  FROM C31.C3CT_GENER_VISIT 
		 WHERE CHK_EXEC_NUM = #chk_exec_num#
		   AND VISIT_FLAG = #visit_flag#
		   AND VISIT_DEGREE = #visit_degree#
		*/
		if(rep_item != null )
		{
			if( rep_item.size() == 0)
			{
				retchk = adaptor.insert("call_FR312302_Insert", map);
				/*
				INSERT INTO C31.C3CT_GENER_VISIT 
				(  
					  CHK_EXEC_NUM
					, VISIT_FLAG
					, VISIT_DEGREE
					, UPD_EMPID
					, UPD_IP
					, CRT_EMPID
					, CRT_IP
					, BLD_NUM
					, INST_PLACE_NUM
					, CHK_TYPE
					, CHK_YEAR
					, CHK_ORDER
					, OBJ_YM
					, PLAN_YM
					, VISIT_YMD
					, NO_CHK_WHY
					, VISITOR_EMPID 
					, VISITOR_NM
					, SUPPLY_STOP_YMD
					, NOT_PERMIT_WHY
					, VISIT_TIME	
				)
				VALUES      
				( 
					  #chk_exec_num#
					, #visit_flag#
					, #visit_degree#
					, #user_id#
					, #client_id#
					, #user_id#
					, #client_id#
					, #bld_num#
					, #inst_place_num#
					, #chk_type#
					, #chk_year#
					, #chk_order#
					, TO_CHAR(SYSDATE,'yyyymm')
					, #plan_ym#
					, #visit_ymd#
					, NVL(#no_chk_why#,' ')
					, #user_id#
					, #visitor_nm#
					, NVL(#supply_stop_ymd#,' ')
					, NVL(#not_permit_why#,' ')
					, #visit_time#
				)
				*/
			}
			else
			{
				ret = adaptor.update("call_FR312302_Update", map);
				/*
				UPDATE C31.C3CT_GENER_VISIT 
				   SET UPD_EMPID       = #user_id#
					 , UPD_IP          = #client_id#
					 , UPD_DTM         = SYSDATE
					 , BLD_NUM         = #bld_num#
					 , INST_PLACE_NUM  = #inst_place_num#
					 , CHK_TYPE        = #chk_type#
					 , CHK_YEAR        = #chk_year#
					 , CHK_ORDER       = #chk_order#
					 , OBJ_YM          = TO_CHAR(SYSDATE,'yyyymm')
					 , PLAN_YM         = #plan_ym#
					 , VISIT_YMD       = #visit_ymd#
					 , NO_CHK_WHY      = NVL(#no_chk_why#,' ')
					 , VISITOR_EMPID   = #user_id#
					 , VISITOR_NM      = #visitor_nm#
					 , SUPPLY_STOP_YMD = NVL(#supply_stop_ymd#,' ')
					 , NOT_PERMIT_WHY  = NVL(#not_permit_why#,' ')
					 , VISIT_TIME      = #visit_time#
				 WHERE CHK_EXEC_NUM = #chk_exec_num#  
				   AND VISIT_FLAG = #visit_flag#  
				   AND VISIT_DEGREE = #visit_degree#
				*/
				//레코드가 한개도 반영되지 않은 경우.
				if(ret <= 0)
				{
					rep.setCode( "FR312302" );
					rep.setMessage( "방문이력 등록에 실패했습니다." );
					rep.setRet(-1);
					return rep;
				}
			}
		}
		else
		{
			rep.setCode( "FR312302" );
			rep.setMessage( "방문이력 등록에 실패했습니다." );
			rep.setRet(-1);
			return rep;
		}
	 */ 
 - 저장
	-> safeChkNoGoodChaInfo객체 항목 중 betterAdviceDegree max값의 개선여부(betterYn)가 'Y'인 경우 부적합대상(safeChkNoGoodInfo) 항목 업데이트
	 - safeChkNoGoodInfo.updEmpid, safeChkNoGoodInfo.pdaIp, safeChkNoGoodInfo.sendYn='S', safeChkNoGoodInfo.endYn = 'Y'
	-> safeChkNoGoodChaInfo객체 항목 중 betterAdviceDegree max값의 개선여부(betterYn)가 'Y'가 아닌 경우 부적합대상(safeChkNoGoodInfo) 항목 업데이트
	 - safeChkNoGoodInfo.updEmpid, safeChkNoGoodInfo.pdaIp, safeChkNoGoodInfo.sendYn='S', safeChkNoGoodInfo.endYn = 'S'
	-> /api/send/safeChk/safeChkRsltNoGoodReg (req : safeChkNoGoodInfo)
	-> safeChkNoGoodInfo.sendYn = 'S'인 항목들만 필터링해서 requset로 
	-> backend 참고부분
		1) SELECT CHK_EXEC_NUM  FROM C31.C3CT_GENER_NOT_PASS_OBJ  WHERE CHK_EXEC_NUM = #chk_exec_num#
		2) 1)에서 조회된 값이 없으면 insert쿼리
			INSERT INTO C31.C3CT_GENER_NOT_PASS_OBJ
			(
				  CHK_EXEC_NUM
				, UPD_EMPID
				, UPD_IP
				, CRT_EMPID,CRT_IP
				, ZIP_NO1
				, ZIP_NO2
				, CITY
				, COUNTY
				, TOWN
				, VILLAGE
				, ADDR1_M
				, ADDR1_S
				, LOT_NUM_SECOND_ADDR
				, CO_LIVE_NM
				, HOUSE_CNT
				, BLD_NM
				, DETA_FLOOR
				, NEW_HOSU
				, NEW_ADDR_UNGRNOUD_YN
				, NEW_ADDR_UNION
				, BLD_NUM
				, INST_PLACE_NUM
				, CHK_TYPE
				, CHK_YEAR
				, CHK_ORDER
				, OBJ_YM,PLAN_YM
				, CUST_NUM
				, CUST_NM
				, CUST_TYPE_CD
				, CUST_TRND_CD
				, USE_CONT_NUM
				, FIRM_NM
				, BIZ_REGI_NUM
				, SOC_NUM
				, OWNHOUSE_TEL_DDD
				, OWNHOUSE_TEL_EXN
				, OWNHOUSE_TEL_NUM
				, CP_DDD
				, CP_EXN
				, CP_NUM
				, CENTER_CD
				, ZONE_MANAGE_NUM
				, LAW_TOWN
				, NEW_ROAD_NM
				, NEW_ADDR_M
				, NEW_ADDR_S
			)
			VALUES
			(
				  #chk_exec_num#
				, #user_id#
				, #client_id#
				, #user_id#
				, #client_id#
				, #zip_no1#
				, #zip_no2#
				, #city#
				, #county#
				, #town#
				, #village#
				, #addr1_m#
				, #addr1_s#
				, #lot_num_second_addr#
				, #co_live_nm#
				, #house_cnt#
				, #bld_nm#
				, #deta_floor#
				, #new_addr_hosu#
				, #new_addr_ungrnoud_yn#
				, #new_addr_union#
				, #bld_num#
				, #inst_place_num#
				, #chk_type#
				, #chk_year#
				, #chk_order#
				, TO_CHAR(SYSDATE,'yyyymm')
				, #plan_ym#
				, #cust_num#
				, #cust_nm#
				, #cust_type_cd#
				, #cust_trnd_cd#
				, #use_cont_num#
				, #firm_nm#
				, #biz_regi_num#
				, SUBSTR(#soc_num#,0,6) || '0000000'
				, #ownhouse_tel_ddd#
				, #ownhouse_tel_exn#
				, #ownhouse_tel_num#
				, #cp_ddd#
				, #cp_exn#
				, #cp_num#
				, #center_cd#
				, #zone_manage_num#
				, ( SELECT LAW_TOWN    FROM C31.C3CT_GENER_OBJ_PDA WHERE CHK_EXEC_NUM = #chk_exec_num#)
				, ( SELECT NEW_ROAD_NM FROM C31.C3CT_GENER_OBJ_PDA WHERE CHK_EXEC_NUM = #chk_exec_num#)
				, ( SELECT NEW_ADDR_M  FROM C31.C3CT_GENER_OBJ_PDA WHERE CHK_EXEC_NUM = #chk_exec_num#)
				, ( SELECT NEW_ADDR_S  FROM C31.C3CT_GENER_OBJ_PDA WHERE CHK_EXEC_NUM = #chk_exec_num#)
			)
		3) 1)에서 조회된 값이 있으면 update쿼리
			UPDATE C31.C3CT_GENER_NOT_PASS_OBJ 
			   SET UPD_EMPID            = #user_id#
			     , UPD_IP               = #client_id#
				 , UPD_DTM              = SYSDATE
				 , ZIP_NO1              = #zip_no1#
				 , ZIP_NO2              = #zip_no2#
				 , CITY                 = #city#
				 , COUNTY               = #county#
				 , TOWN                 = #town#
				 , VILLAGE              = #village#
				 , ADDR1_M              = #addr1_m#
				 , ADDR1_S              = #addr1_s#
				 , LOT_NUM_SECOND_ADDR  = #lot_num_second_addr#
				 , CO_LIVE_NM           = #co_live_nm#
				 , HOUSE_CNT            = #house_cnt#
				 , BLD_NM               = #bld_nm#
				 , DETA_FLOOR           = #deta_floor#
				 , NEW_HOSU             = #new_addr_hosu#
				 , NEW_ADDR_UNGRNOUD_YN = #new_addr_ungrnoud_yn#
				 , NEW_ADDR_UNION       = #new_addr_union#
				 , BLD_NUM              = #bld_num#
				 , INST_PLACE_NUM       = #inst_place_num#
				 , CHK_TYPE             = #chk_type#
				 , CHK_YEAR             = #chk_year#
				 , CHK_ORDER            = #chk_order#
				 , OBJ_YM               = TO_CHAR(SYSDATE,'yyyymm')
				 , PLAN_YM              = #plan_ym#
				 , CUST_NUM             = #cust_num#
				 , CUST_NM              = #cust_nm#
				 , CUST_TYPE_CD         = #cust_type_cd#
				 , CUST_TRND_CD         = #cust_trnd_cd#
				 , USE_CONT_NUM         = #use_cont_num#
				 , FIRM_NM              = #firm_nm#
				 , BIZ_REGI_NUM         = #biz_regi_num#
				 , SOC_NUM              = SUBSTR(#soc_num#,0,6) || '0000000'
				 , OWNHOUSE_TEL_DDD     = #ownhouse_tel_ddd#
				 , OWNHOUSE_TEL_EXN     = #ownhouse_tel_exn#
				 , OWNHOUSE_TEL_NUM     = #ownhouse_tel_num#
				 , CP_DDD               = #cp_ddd#
				 , CP_EXN               = #cp_exn#
				 , CP_NUM               = #cp_num#
				 , CENTER_CD            = #center_cd#
				 , ZONE_MANAGE_NUM      = #zone_manage_num#
			 WHERE CHK_EXEC_NUM = #chk_exec_num#
  -> /api/send/safeChk/safeChkRsltNoGoodChaReg (req : safeChkNoGoodChaInfo)
	-> safeChkNoGoodChaInfo.sendYn = 'S'인 항목들만 필터링해서 requset로 보냄
	-> backend 참고부분
		1) SELECT CHK_EXEC_NUM, BETTER_ADVICE_DEGREE FROM C31.C3CT_GENER_BETTER_ADVICE WHERE CHK_EXEC_NUM = #chk_exec_num# AND BETTER_ADVICE_DEGREE = #better_advice_degree#
		2) 1)에서 조회된 값이 없으면 insert쿼리
			INSERT INTO C31.C3CT_GENER_BETTER_ADVICE 
			(
				  CHK_EXEC_NUM
				, BETTER_ADVICE_DEGREE
				, UPD_EMPID
			    , UPD_IP
			    , CRT_EMPID
				, CRT_IP
				, BLD_NUM
				, INST_PLACE_NUM
				, CHK_TYPE
				, CHK_YEAR
				, CHK_ORDER
				, OBJ_YM,PLAN_YM
				, BETTER_ADVICE_YMD
				, BETTER_ADVICE_EXPIRE
				, BETTER_YN
				, BETTER_END_YMD
				, SUPPLY_STOP_YMD
				, NOT_PERMIT_WHY
			)
			VALUES
			(
				  #chk_exec_num#
				, #better_advice_degree#
				, #user_id#
				, #client_id#
				, #user_id#
				, #client_id#
				, #bld_num#
				, #inst_place_num#
				, #chk_type#
				, #chk_year#
				, #chk_order#
				, TO_CHAR(SYSDATE,'yyyymm')
				, #plan_ym#
				, #better_advice_ymd#
				, #better_advice_expire#
				, #better_yn#
				, #better_end_ymd#
				, #supply_stop_ymd#
				, #not_permit_why#
			)
		3) 1)에서 조회된 값이 있으면 update쿼리
			UPDATE C31.C3CT_GENER_BETTER_ADVICE 
			   SET UPD_DTM			    = SYSDATE
				 , OBJ_YM               = TO_CHAR(SYSDATE,'yyyymm')
				 , BETTER_ADVICE_YMD    = #better_advice_ymd#
				 , BETTER_ADVICE_EXPIRE = #better_advice_expire#
				 , BETTER_YN       	    = #better_yn#
				 , BETTER_END_YMD  	    = #better_end_ymd#
				 , SUPPLY_STOP_YMD 	    = #supply_stop_ymd#
				 , NOT_PERMIT_WHY  	    = #not_permit_why#
			 WHERE CHK_EXEC_NUM = #chk_exec_num# 
			   AND BETTER_ADVICE_DEGREE = #better_advice_degree#
  -> /api/send/safeChk/safeChkRsltNoGoodDetalReg (req : safeChkNoGoodDetalInfo)
	-> safeChkNoGoodDetalInfo.sendYn = 'S'인 항목들만 필터링해서 requset로 보냄
	-> backend 참고부분
		1) SELECT CHK_EXEC_NUM, CHK_SEC_CD, NOT_PASS_ITEM_CD FROM C31.C3CT_GENER_NOT_PASS WHERE CHK_EXEC_NUM = #chk_exec_num# AND CHK_SEC_CD = #chk_sec_cd# AND MTR_NUM = #mtr_num# AND BURNER_NUM = #burner_num# AND NOT_PASS_ITEM_CD = #not_pass_item_cd#
		2) 1)에서 조회된 값이 없으면 insert쿼리
			INSERT INTO C31.C3CT_GENER_NOT_PASS
			(
				  CHK_EXEC_NUM
				, BETTER_DEGREE
				, CHK_SEC_CD
				, MTR_NUM
				, BURNER_NUM
				, NOT_PASS_ITEM_CD
				, UPD_EMPID
				, UPD_IP
				, CRT_EMPID
				, CRT_IP
				, BLD_NUM
				, INST_PLACE_NUM
				, CHK_TYPE
				, CHK_YEAR
				, CHK_ORDER
				, OBJ_YM
				, PLAN_YM
				, CHK_SEC_NM
				, NOT_PASS_ITEM_NM
				, MTR_ID_NUM
				, VISIT_DTM
				, BETTER_PLAN_YMD
				, BETTER_YN
				, BETTER_END_YMD
				, BETTER_CONF_EMPID
				, BETTER_CONF_NM
				, PHOTO_ID
				, BETTER_PHOTO_ID
			)
			VALUES
			(
				  #chk_exec_num#
				, #better_degree#
				, #chk_sec_cd#
				, #mtr_num#
				, #burner_num#
				, #not_pass_item_cd#
				, #user_id#
				, #client_id#
				, #user_id#
				, #client_id#
				, #bld_num#
				, #inst_place_num#
				, #chk_type#
				, #chk_year#
				, #chk_order#
				, TO_CHAR(SYSDATE,'yyyymm')
				, #plan_ym#
				, #chk_sec_nm#
				, #not_pass_item_nm#
				, #mtr_id_num#
				, TO_DATE(#visit_dtm#,'YYYYMMDDHH24MISS')
				, #better_plan_ymd#
				, #better_yn#
				, #better_end_ymd#
				, #better_conf_empid#
				, #better_conf_nm#
				, 0
				, 0
			)
		3) 1)에서 조회된 값이 있으면 update쿼리 - betterYn값이 있는 대상인 경우 - betterYn = 'Y'인 경우
			UPDATE C31.C3CT_GENER_NOT_PASS  
			   SET UPD_DTM           = SYSDATE  
				 , BLD_NUM           = #bld_num#  
				 , INST_PLACE_NUM    = #inst_place_num#
				 , CHK_TYPE          = #chk_type#
				 , CHK_YEAR          = #chk_year# 
				 , CHK_ORDER         = #chk_order#
				 , OBJ_YM            = TO_CHAR(SYSDATE,'yyyymm') 
				 , PLAN_YM           = #plan_ym#
				 , CHK_SEC_NM        = #chk_sec_nm# 
				 , NOT_PASS_ITEM_NM  = #not_pass_item_nm#
				 , MTR_ID_NUM        = #mtr_id_num#
				 , VISIT_DTM         = TO_DATE(#visit_dtm#,'YYYYMMDDHH24MISS')  
				 , BETTER_PLAN_YMD   = #better_plan_ymd# 
				 , BETTER_YN         = #better_yn# 
				 , BETTER_END_YMD    = #better_end_ymd# 
				 , BETTER_CONF_EMPID = #better_conf_empid# 
				 , BETTER_CONF_NM    = #better_conf_nm#
			 WHERE CHK_EXEC_NUM = #chk_exec_num#    
			   AND CHK_SEC_CD = #chk_sec_cd#  
			   AND MTR_NUM = #mtr_num#     
			   AND BURNER_NUM = #burner_num#    
			   AND NOT_PASS_ITEM_CD = #not_pass_item_cd#
		4) 1)에서 조회된 값이 있으면 update쿼리 - betterYn값이 있는 대상인 경우 - betterYn != 'Y'인 경우
		5) 1)에서 조회된 값이 있으면 update쿼리 - betterYn값이 없는 대상인 경우 ( 4,5동일쿼리 )
			UPDATE C31.C3CT_GENER_NOT_PASS
			   SET UPD_DTM           = SYSDATE 
			     , BLD_NUM           = #bld_num#  
				 , INST_PLACE_NUM    = #inst_place_num#
				 , CHK_TYPE          = #chk_type# 
				 , CHK_YEAR          = #chk_year# 
				 , CHK_ORDER         = #chk_order#
				 , OBJ_YM            = TO_CHAR(SYSDATE,'yyyymm')
				 , PLAN_YM           = #plan_ym#
				 , CHK_SEC_NM        = #chk_sec_nm#
				 , NOT_PASS_ITEM_NM  = #not_pass_item_nm#
				 , MTR_ID_NUM        = #mtr_id_num#
				 , VISIT_DTM         = TO_DATE(#visit_dtm#,'YYYYMMDDHH24MISS')
			     , BETTER_PLAN_YMD   = #better_plan_ymd# 
				 , BETTER_YN         = #better_yn# 
				 , BETTER_END_YMD    = #better_end_ymd# 
				 , BETTER_CONF_EMPID = #better_conf_empid# 
				 , BETTER_CONF_NM    = #better_conf_nm#
			 WHERE CHK_EXEC_NUM = #chk_exec_num#  
			   AND CHK_SEC_CD = #chk_sec_cd#  
			   AND MTR_NUM = #mtr_num#     
			   AND BURNER_NUM = #burner_num#   
			   AND NOT_PASS_ITEM_CD = #not_pass_item_cd#

	-> /api/send/safeChk/safeChkRsltNoGoodPhotoReg (req : safeChkNoGoodInfo - 파일업로드 및 이력생성에 필요)
	-> 부적합사진은 전송할 safeChkNoGoodInfo객체 항목추가해서 request
	-> 부적합 사진은 부적합사진, 개선완료사진이있는데 이는 사진파일명의 맨앞자리 숫자로 구분 (1:부적합, 2:개선)
	-> safeChkNoGoodInfo.gubun 항목추가하여 값 셋팅
	-> backend 참고부분
		SimpleDateFormat form_day = new SimpleDateFormat ( "yyyyMMdd", Locale.KOREA );
		SimpleDateFormat form_time = new SimpleDateFormat ( "HHmmss", Locale.KOREA );
		Date currentTime = new Date ( );
		String day = form_day.format ( currentTime );
		String time = form_time.format ( currentTime );
		String yyyy = day.substring(0, 4);
		String mm = day.substring(4, 6);
		String dd = day.substring(6, 8);
		
		LOG.debug("REQ: " + req.toString());
		
		try
		{
			map = adaptor.BeanToMap(req, map);
			
			rep_item = (List<FR312308_OUT_Item>) smct.queryForList("call_FR312308", map);
			/*
			SELECT CHK_EXEC_NUM
			     , CHK_SEC_CD
			     , NOT_PASS_ITEM_CD
			  FROM C31.C3CT_GENER_NOT_PASS
			 WHERE CHK_EXEC_NUM = #chk_exec_num#
			   AND CHK_SEC_CD = #chk_sec_cd#
			   AND MTR_NUM = #mtr_num#
			   AND BURNER_NUM = #burner_num#
			   AND NOT_PASS_ITEM_CD = #not_pass_item_cd#
			*/
			
			if(rep_item != null)
			{
				if(rep_item.size() > 0 )
				{
			
					b64sign = req.getPhoto();
					byte[] bsign = Base64.decodeBase64( b64sign );
					map.put("photo_b", bsign );
					
					file_Seqs = (List<FILE_Seq>) smct.queryForList("call_file_seq");
					/*
					SELECT C31.C3S_FILE_ID.NEXTVAL AS SEQ FROM DUAL
					*/
					if(file_Seqs == null)
					{
						rep.setCode("FR312317");
						rep.setMessage("파일ID 생성 실패 했습니다.");
						return rep;
					}
					
					szfileid = file_Seqs.get(0).getSeq();
					map.put( "file_id", szfileid );
					map.put( "file_code", "C32" );
					
					//szpath = /exdat03/C30/C32
					szpath += File.separator+yyyy+File.separator+mm;
					File path = new File(szpath);
					if (!path.exists())
					{
						path.mkdirs();
					}
					
					map.put( "file_path", szpath );
					
					if( req.getGubun().equals("1")  )
						szfilenm = "C32E" +req.getChk_exec_num()+"M"+req.getMtr_num()+"B"+req.getBurner_num()+"N"+req.getChk_sec_cd()+req.getNot_pass_item_cd()+"D"+day+time+".jpg";
					else
						szfilenm = "C32E" +req.getChk_exec_num()+"M"+req.getMtr_num()+"B"+req.getBurner_num()+"B"+req.getChk_sec_cd()+req.getNot_pass_item_cd()+"D"+day+time+".jpg";
					
					map.put( "file_name", szfilenm );
					
					f = new CFile( szpath + "/" + szfilenm );
					f.OpenReadWrite();
					f.Write(bsign, bsign.length );
					f.Close();
					file_size = bsign.length;
					szfilesize = String.valueOf(file_size);
					 
					map.put( "file_size", szfilesize );
					
					retchk = adaptor.insert("call_FR312317_File_Insert", map);
					/*
					INSERT INTO C31.C3AT_FILE_INFO_PDA
					(
						  FILE_ID
						, FILE_NAME
						, ORG_FILE_NAME
						, FILE_CODE
						, FILE_PATH
						, FILE_SIZE
						, CRT_DTM
						, CRT_EMPID
						, CRT_IP
						, UPD_DTM
						, UPD_EMPID
						, UPD_IP
						, PHOTO_SEND_YMD
					)
					VALUES
					(
						  #file_id#
						, #file_name#
						, #file_name#
						, #file_code#
						, #file_path#
						, #file_size#
						, SYSDATE
						, #userid#
						, #clientid#
						, SYSDATE
						, #userid#
						, #clientid#
						, TO_CHAR(SYSDATE,'yyyymmdd')
					)
					*/
					
					
					if( req.getGubun().equals("1")  )
					{
						ret = smct.update("call_FR312317_photo", map);
						/*
						UPDATE C31.C3CT_GENER_NOT_PASS  
						   SET PHOTO_ID = #file_id#
							 , UPD_DTM  = SYSDATE 
						 WHERE CHK_EXEC_NUM = #chk_exec_num#
						   AND MTR_NUM = #mtr_num#
						   AND BURNER_NUM = #burner_num#
						   AND CHK_SEC_CD = #chk_sec_cd#
						   AND NOT_PASS_ITEM_CD = #not_pass_item_cd#
						*/
						if (ret < 0)
						{
							rep.setCode( "FR312317" );
							rep.setMessage( "오류 발생 잠시 후 재시도 하십시오." );
							return rep;
						}
					}
					else
					{
						ret = smct.update("call_FR312317_Bphoto", map);
						/*
						UPDATE C31.C3CT_GENER_NOT_PASS 
						   SET BETTER_PHOTO_ID = #file_id#
							 , UPD_DTM         = SYSDATE
						 WHERE CHK_EXEC_NUM = #chk_exec_num#
						   AND MTR_NUM = #mtr_num#
						   AND BURNER_NUM = #burner_num#
						   AND CHK_SEC_CD = #chk_sec_cd#
						   AND NOT_PASS_ITEM_CD = #not_pass_item_cd#
						*/
						//레코드가 한개도 반영되지 않은 경우.
						if (ret < 0)
						{
							rep.setCode( "FR312317" );
							rep.setMessage( "부적합 상세 등록에 실패했습니다." );
							return rep;
						}
					}
					bret = true;
				}
				else
				{
					bret = true;
					rep.setCode("0000");
					rep.setMessage("OK");
				}
			}
		}
