1.개선권고 목록
 - 상단 필터링 버튼
	-> 전체 : safeChkNoGoodInfo객체 모든 항목
	-> 부적합 : safeChkNoGoodDetalInfo.excepPreuseChk == 'N'인 대상
		- asis : WHERE ( CASE WHEN ('N') IN ( SELECT EXCEP_PREUSE_CHK FROM NORMAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM = NG.CHK_EXEC_NUM ) THEN 'Y' ELSE 'N' END  ) = 'Y'")
	-> 권고 : safeChkNoGoodDetalInfo.excepPreuseChk == 'Y'인 대상
		- asis : WHERE ( CASE WHEN ('Y') IN ( SELECT EXCEP_PREUSE_CHK FROM NORMAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM = NG.CHK_EXEC_NUM ) THEN 'Y' ELSE 'N' END  ) = 'Y'")
 - 목록 항목 표기
 - 주소
	-> 도로명
	 - safeChkNoGoodInfo.town || ' ' || safeChkNoGoodInfo.village || ' ' || safeChkNoGoodInfo.newRoadNm || ' ' || safeChkNoGoodInfo.newAddrM || '-' || safeChkNoGoodInfo.newAddrS || ' ' || safeChkNoGoodInfo.coLiveNm || ' ' || safeChkNoGoodInfo.bldNm || '-' || safeChkNoGoodInfo.houseCnt || ' ' || safeChkNoGoodInfo.lotNumSecondAddr || '/' || safeChkNoGoodInfo.custNm
	 - asis : IFNULL(TOWN,'') ||' '|| IFNULL(VILLAGE,'') ||' '|| IFNULL(NEW_ROAD_NM,'') ||' '|| IFNULL(NEW_ADDR_M,'') ||'-'|| IFNULL(NEW_ADDR_S,'') ||' '|| IFNULL(CO_LIVE_NM, '') ||' '|| IFNULL(BLD_NM, '') ||'-'|| IFNULL(HOUSE_CNT, '') ||' '|| IFNULL(LOT_NUM_SECOND_ADDR,' ')
	-> 지번
	 - safeChkNoGoodInfo.town ||' '|| safeChkNoGoodInfo.village ||' '|| safeChkNoGoodInfo.addr1M ||'-'|| safeChkNoGoodInfo.addr1S ||' '|| safeChkNoGoodInfo.coLiveNm ||' '|| safeChkNoGoodInfo.bldNm ||' '|| safeChkNoGoodInfo.houseCnt ||' '|| safeChkNoGoodInfo.lotNumSecondAddr
	 - asis : IFNULL(TOWN,'') ||' '|| IFNULL(VILLAGE,'') ||' '|| IFNULL(ADDR1_M,'') ||'-'|| IFNULL(ADDR1_S,'') ||' '|| IFNULL(CO_LIVE_NM,'') ||' '|| IFNULL(BLD_NM,'') ||'-'|| IFNULL(HOUSE_CNT,'') ||' '|| IFNULL(LOT_NUM_SECOND_ADDR,'')
 - 고객명 : safeChkNoGoodInfo.custNm
 - 상태 : safeChkNoGoodInfo.endYn (Y:완료, S:진행, else:미검)

2.개선권고 개요
 - 상단 버튼 : 정기점검(safeChkNoGoodInfo.chkExecNum과 일치하는 safeChkData.chkExecNum이 있는 경우 활성화 : 선택화면 점검개요 화면으로 이동)

 - 고객명 : safeChkNoGoodInfo.custNm / 상호명이 있는 경우 (safeChkNoGoodInfo.firmNm)
 - 주소 표기 (기본표기 도로명, 주소 클릭 시 지번으로 변경표기)
	-> addrInfo += addrInfo;
	-> 도로명
		if(length(safeChkNoGoodInfo.county) > 0)		
		{
			addrInfo += safeChkNoGoodInfo.county;
		}
		if(length(safeChkNoGoodInfo.newRoadNm) > 0)
		{
			addrInfo += " ";
			addrInfo +=  safeChkNoGoodInfo.newRoadNm;
		}
		if(length(safeChkNoGoodInfo.newAddrM) > 0)
		{
			addrInfo += " ";
			addrInfo +=  safeChkNoGoodInfo.newAddrM;
		}
		if(length(safeChkNoGoodInfo.newAddrS) > 0)
		{
			addrInfo +=  "-" );
			addrInfo +=  safeChkNoGoodInfo.newAddrS;
			addrInfo +=  "\n" ;
		}
		if( Str_Cmp(safeChkNoGoodInfo.singleColiveFlag, "10") == 0 )
		{
			if(length(safeChkNoGoodInfo.houseCnt) > 0)
			{
				addrInfo +=  safeChkNoGoodInfo.houseCnt;
			}
			if(length(safeChkNoGoodInfo.lotNumSecondAddr) > 0)
			{
				addrInfo += " ";
				addrInfo +=  safeChkNoGoodInfo.lotNumSecondAddr;
			}
		}
		else if( Str_Cmp(safeChkNoGoodInfo.singleColiveFlag, "20") == 0 )
		{
			if(length(safeChkNoGoodInfo.coLiveNm) > 0)
			{
				addrInfo +=  safeChkNoGoodInfo.coLiveNm;
			}
			if(length(safeChkNoGoodInfo.bldNm) > 0)
			{
				addrInfo += " ";
				addrInfo +=  safeChkNoGoodInfo.bldNm;
			}
			if(length(safeChkNoGoodInfo.houseCnt) > 0)
			{
				addrInfo +=  "-" );
				addrInfo +=  safeChkNoGoodInfo.houseCnt;
			}
		}
	-> 지번		
		if(length(safeChkNoGoodInfo.county) > 0)		
		{
			addrInfo += safeChkNoGoodInfo.county;
		}
		if(length(safeChkNoGoodInfo.town) > 0)			
		{
			addrInfo += " ";
			addrInfo += safeChkNoGoodInfo.town;
		}
		if(length(safeChkNoGoodInfo.village) > 0)			
		{
			addrInfo += " ";
			addrInfo +=  safeChkNoGoodInfo.village;
		}
		if(length(safeChkNoGoodInfo.addr1M > 0)		
		{
			addrInfo += " ";
			addrInfo +=  safeChkNoGoodInfo.addr1M);
		}
		if(length(safeChkNoGoodInfo.addr1S) > 0)		
		{
			addrInfo +=  "-" );
			addrInfo +=  safeChkNoGoodInfo.addr1S);
		}		
		addrInfo +=  "\n";		
		if( safeChkNoGoodInfo.singleColiveFlag == "10" )
		{
			if(length(safeChkNoGoodInfo.houseCnt) > 0)
			{
				addrInfo +=  safeChkNoGoodInfo.houseCnt;
			}
			if(length(safeChkNoGoodInfo.bldNm) > 0)
			{
				addrInfo += " ";
				addrInfo +=  safeChkNoGoodInfo.bldNm;
			}
			if(length(safeChkNoGoodInfo.lotNumSecondAddr) > 0)
			{
				addrInfo += " ";
				addrInfo +=  safeChkNoGoodInfo.lotNumSecondAddr);
			}
		}
		else if( safeChkNoGoodInfo.singleColiveFlag == "20")
		{
			if(length(safeChkNoGoodInfo.coLiveNm) > 0)
			{
				addrInfo +=  safeChkNoGoodInfo.coLiveNm );
			}
			if(length(safeChkNoGoodInfo.bldNm) > 0)
			{
				addrInfo += " ";
				addrInfo +=  safeChkNoGoodInfo.bldNm;
			}
			if(length(safeChkNoGoodInfo.houseCnt) > 0)
			{
				addrInfo +=  "-";
				addrInfo +=  safeChkNoGoodInfo.houseCnt;
			}
		}
 - 부적합이력
	-> safeChkNoGoodChaInfo객체 및 safeChkNoGoodDetalInfo객체 항목 조합 표기
	-> safeChkNoGoodChaInfo.betterAdviceDegree | safeChkNoGoodChaInfo.betterYn(Y:개선,N:미개선) | safeChkNoGoodDetalInfo.notPassItemNm
	   safeChkNoGoodChaInfo.betterAdviceYmd | safeChkNoGoodChaInfo.betterAdviceExpire
	-> ▼ 클릭 시
	 - 점검단위 : safeChkNoGoodDetalInfo.chkSecNm
	 - 세부항목 : safeChkNoGoodDetalInfo.notPassItemNm
	 - 연소기번호 : safeChkNoGoodDetalInfo.burnerNum
	 - 부적합사진 : 실시간으로 수신할지 검토중 (부적합대상 수신할때 같이 받을지)



	-> 개선처리 : safeChkNoGoodChaInfo.bettYn = 'Y', safeChkNoGoodChaInfo.betterEndYmd(오늘일자), safeChkNoGoodChaInfo.updEmpid = equipTelNum, safeChkNoGoodChaInfo = employeeId, safeChkNoGoodChaInfo.sendYn = 'S' 셋팅
	 - 사진촬영 폴더 및 파일명 : 2_safeChkNoGoodDetalInfo.chkExecNum_safeChkNoGoodDetalInfo.mtrNum(null=000000000)_safeChkNoGoodDetalInfo.burnerNum(null=000000)_safeChkNoGoodDetalInfo.chkSecCd_safeChkNoGoodDetalInfo.notPassItemCd
	-> 개선처리 완료 시 : 개선일자 및 사진 표기 (safeChkNoGoodChaInfo.betterEndYmd, 사진)



	-> 개선권고발행 : safeChkNoGoodChaInfo.betterAdviceDegree+1, safeChkNoGoodChaInfo.betterAdviceYmd(오늘일자), safeChkNoGoodChaInfo.betterAdviceExpire(오늘일자+30일)
	 - 기존 개선권고발행일이 현재일자기준 +30일이 경과된 경우만 개선권고발행가능


	 - safeChkNoGoodChaInfo.betterAdviceDegree+1이 3차수인 경우 공급중지여부에 따른 공급중지일자(safeChkNoGoodChaInfo.supplyStopYmd), 중지불가사유(safeChkNoGoodChaInfo.notPermitWhy) 입력
	 - 공급중지일자는 오늘일자로 자동 셋팅, 중지불가사유는 화면코드-NOSTOP_WHY 콤보박스 셋팅


 - 방문등록 (safeChkVisitInfo.visitYmd 오늘날짜 등록건이 있는 경우 버튼 비활성화 / safeChkNoGoodChaInfo.betterYn = 'Y'인 경우 "개선 완료된 대상입니다." 알림메세지)
	-> safeChkVisitInfo객체 항목 생성 
	 - safeChkVisitInfo.chkExecNum		-> safeChkNoGoodInfo.chkExecNum
	 - safeChkVisitInfo.visitFlag		-> '30'
	 - safeChkVisitInfo.visitDegree		-> safeChkVisitInfo.visitDegree+1 (신규 등록건이면 '01')
	 - safeChkVisitInfo.visitorId		-> init-data.employeeData.employeeId
	 - safeChkVisitInfo.sendYn			-> 'S'
	 - safeChkVisitInfo.visitYmd		-> 오늘일자
	 - safeChkVisitInfo.visitorNm		-> init-data.employeeData.nmKor
	 - safeChkVisitInfo.bldNum			-> safeChkNoGoodInfo.bldNum
	 - safeChkVisitInfo.instPlaceNum	-> safeChkNoGoodInfo.instPlaceNum
	 - safeChkVisitInfo.chkType			-> safeChkNoGoodInfo.chkType
	 - safeChkVisitInfo.chkYear			-> safeChkNoGoodInfo.chkYear
	 - safeChkVisitInfo.chkOrder		-> safeChkNoGoodInfo.chkOrder
	 - safeChkVisitInfo.objYm			-> safeChkNoGoodInfo.objYm
	 - safeChkVisitInfo.planYm			-> safeChkNoGoodInfo.planYm
	 - safeChkVisitInfo.updEmpid		-> init-data.employeeData.employeeId
	 - safeChkVisitInfo.pdaIp			-> init-data.employeeData.equipTelNum
	 - safeChkVisitInfo.visitTime 		-> 현재시간
	 - safeChkVisitInfo.noChkWhy 		-> ''
	 - safeChkVisitInfo.supplyStopYmd	-> ''
	 - safeChkVisitInfo.notPermitWhy	-> ''
	 - /api/send/safeChk/noChkReg 미점검등록 api 호출 (방문등록 동일 api)
 - 저장
	-> safeChkNoGoodChaInfo객체 항목 중 betterAdviceDegree max값의 개선여부(betterYn)가 'Y'인 경우 부적합대상(safeChkNoGoodInfo) 항목 업데이트
	 - safeChkNoGoodInfo.updEmpid, safeChkNoGoodInfo.pdaIp, safeChkNoGoodInfo.sendYn='S', safeChkNoGoodInfo.endYn = 'Y'
	-> safeChkNoGoodChaInfo객체 항목 중 betterAdviceDegree max값의 개선여부(betterYn)가 'Y'가 아닌 경우 부적합대상(safeChkNoGoodInfo) 항목 업데이트
	 - safeChkNoGoodInfo.updEmpid, safeChkNoGoodInfo.pdaIp, safeChkNoGoodInfo.sendYn='S', safeChkNoGoodInfo.endYn = 'S'
	-> /api/send/safeChk/safeChkRsltNoGoodReg (req : safeChkNoGoodInfo)
	-> safeChkNoGoodInfo.sendYn = 'S'인 항목들만 필터링해서 requset로 
// 부적합 대상 등록


//개선 차수
  -> /api/send/safeChk/safeChkRsltNoGoodChaReg (req : safeChkNoGoodChaInfo)
	-> safeChkNoGoodChaInfo.sendYn = 'S'인 항목들만 필터링해서 requset로 보냄


// 개선 디테일
  -> /api/send/safeChk/safeChkRsltNoGoodDetalReg (req : safeChkNoGoodDetalInfo)
	-> safeChkNoGoodDetalInfo.sendYn = 'S'인 항목들만 필터링해서 requset로 보냄


// 개선 포토
	-> /api/send/safeChk/safeChkRsltNoGoodPhotoReg (req : safeChkNoGoodInfo - 파일업로드 및 이력생성에 필요)
	-> 부적합사진은 전송할 safeChkNoGoodInfo객체 항목추가해서 request
	-> 부적합 사진은 부적합사진, 개선완료사진이있는데 이는 사진파일명의 맨앞자리 숫자로 구분 (1:부적합, 2:개선)
	-> safeChkNoGoodInfo.gubun 항목추가하여 값 셋팅
	